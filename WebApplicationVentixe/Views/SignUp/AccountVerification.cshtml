@model AccountVerificationViewModel
@{
    ViewData["Title"] = "Verify Your Email Address";
    Layout = "_AuthLayout";
}

<div id="signup" class="card mx-auto mt-5">
    <div class="card-header text-center mt-3">
        <h2 class="h4 mb-2">Verify Your Email Address</h2>
        <p class="text-muted">An email with a verification code was sent to @ViewBag.MaskedEmail. Please enter the code to verify.</p>
        @if (!string.IsNullOrEmpty(ViewBag?.ErrorMessage))
        {
            <p>
                @ViewBag?.ErrorMessage
            </p>
        }
    </div>
    <div class="card-body">
        <form method="post" asp-action="AccountVerification" asp-controller="SignUp" novalidate>
            <input type="hidden" asp-for="Code" />
            <div class="mb-3">
                <div class="additional-info right"><a asp-action="Index" asp-controller="SignUp">Resend verification code? </a></div>
                <div class="form-control verification-code-wrapper" style="border: none;">
                    @for (int i = 0; i < 6; i++)
                    {
                        <input type="text" maxlength="1" class="verification-code-input" id="box-@i" />
                    }
                </div>
            </div>
            <button type="submit" class="btn btn-primary w-100">Verify Code & Continue</button>
        </form>
    </div>
    <div class="card-footer text-center">
        <p class="mb-0">Already have an account yet? <a asp-action="Index" asp-controller="Login">Log In</a></p>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function (){
        const boxes = document.querySelectorAll(".verification-code-input");
        const hiddenInput = document.querySelector("input[name='Code']");
        boxes[0].focus();

        boxes.forEach((box, index) => {
            box.addEventListener("input", function (){
                box.value = box.value.replace(/[^0-9]/g, '');
                if (box.value.length === 1 && index < boxes.length - 1) {
                    boxes[index + 1].focus();
                } 
                hiddenInput.value = Array.from(boxes).map(b => b.value).join('');
            });
            box.addEventListener("keydown", function (e) {
                if (e.key === "Backspace" && index > 0 && box.value.length === 0) {
                    boxes[index - 1].focus();
                }
            });
        });
    });
</script>